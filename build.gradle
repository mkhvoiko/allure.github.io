plugins {
    id 'java'
    id 'io.qameta.allure' version "${allure_gradle_plugin_version}"
}

repositories {
    flatDir {
        dir System.getProperty('jars.path')
    }
}

import com.e2e.tests.utils.generators.TestNGSuiteGenerator
import com.e2e.tests.utils.datatranferobjects.ExecDefinitions
import groovy.json.JsonBuilder
import org.apache.commons.text.StringSubstitutor

import java.nio.file.Files

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

dependencies {

    implementation project(':commons')
    implementation project(':tdm-client')
    implementation project(':e2e-client')

    implementation group: 'com.codeborne', name: 'selenide-testng', version: "${selenide_version}"
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: "${feign_version}"
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: "${allure_version}"
    implementation group: 'io.qameta.allure', name: 'allure-selenide', version: "${allure_version}"
    implementation group: 'io.appium', name: 'java-client', version: "${appium_java_client_version}"
    implementation group: 'com.e2e.tests', name: 'e2e-suite-generator', version: "${e2e_suite_generator_version}"

    implementation(group: 'com.github.automatedowl', name: 'allure-environment-writer', version: "${allure_environment_writer_version}") {
        exclude group: 'io.qameta.allure', module: 'allure-testng'
    }

    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockito_core_version}"
}

File prevReportHistoryLocation = new File("${project.buildDir}", "${previous_allure_history_folder}")
File currentReportHistoryLocation = new File("${project.buildDir}", "${current_allure_history_folder}")
File tmpAllureHistoryLocation = new File("${project.rootDir}", "${tmp_allure_history_folder}")

allure {
    version = "${allure_version}"
    aspectjweaver = true
    autoconfigure = true
    useTestNG {
        version = "${allure_version}"
    }
}

//Save allure history from previous runs to a temporary location before cleanings
//The task must be executed before :clean and before :forceAllureHistoryToReport tasks
task saveAllureHistory {
    doLast {
        println("Moving ${prevReportHistoryLocation.absolutePath} to " +
                "${tmpAllureHistoryLocation.absolutePath}")

        if (prevReportHistoryLocation.exists()) {
            deleteRecursivelyIfExists tmpAllureHistoryLocation

            Files.move(prevReportHistoryLocation.toPath(), tmpAllureHistoryLocation.toPath()
                    , REPLACE_EXISTING)
        }
    }
}

//Move saved allure history from previous executions to allure-results folder
//The task must be executed before generating allure report
task forceAllureHistoryToReport {
    dependsOn(saveAllureHistory)

    doLast {
        println("Moving ${tmpAllureHistoryLocation.absolutePath} to " +
                "${currentReportHistoryLocation.absolutePath}")

        if (tmpAllureHistoryLocation.exists()) {

            Files.move(tmpAllureHistoryLocation.toPath()
                    , currentReportHistoryLocation.toPath()
                    , REPLACE_EXISTING)
        }
    }
}

clean {
    dependsOn(saveAllureHistory)
    delete(
            "${overriddenTestNgSuiteFileName}"
            , "logs"
    )
}

test {
    ExecDefinitions execDefinitions = getExecDefinitions()
    overrideSystemProperties(execDefinitions)
    systemProperties(System.getProperties())

    useTestNG() {
        if (testSuiteOverride(execDefinitions)) suites file("${overriddenTestNgSuiteFileName}")
        else suites "${defaultSuites}".split(",").collect { it.trim() }.toArray([] as String[])

        testLogging {
            events "passed", "failed", "standardError"
            testLogging.showStandardStreams = true
            exceptionFormat "full"
        }
    }
}

task generatePlan(type: Test) {
    ExecDefinitions execDefinitions = getExecDefinitions()
    overrideSystemProperties(execDefinitions)
    //Setup name of the generated file
    System.setProperty("e2e.test.plan.name", "e2e.generated.plan.json")
    systemProperties(System.getProperties())

    useTestNG() {
        if (testSuiteOverride(execDefinitions)) suites file("${overriddenTestNgSuiteFileName}")
        else suites "${defaultSuites}".split(",").collect { it.trim() }.toArray([] as String[])

        options {
            listeners.add("com.e2e.tests.utils.listeners.TestPlanGeneratorInterceptorTestNg")
        }
    }
}

task configTest(type: Test, dependsOn: ['check']) {
    systemProperties(System.getProperties())
    useTestNG() {
        testLogging {
            events "passed", "failed", "standardError"
            exceptionFormat "full"
            includeGroups "config", "unit"
        }
    }
}

private void deleteRecursivelyIfExists(File file) {
    if (file.exists()) {
        if (file.isDirectory()) file.listFiles().each { deleteRecursivelyIfExists(it) }
        else file.delete()
    }
}

private static ExecDefinitions getExecDefinitions() {
    def source = System.getProperty("execDefinitions")

    if (!source) {
        return null
    }

    if (source.contains("file://")) {
        def execDefinitions_file = source.replace("file://", "")
        File execDefinitions_fp = new File(execDefinitions_file)
        source = execDefinitions_fp.text
        System.setProperty("execDefinitions", source)
    }

    ExecDefinitions execDefinitions = ExecDefinitions.parse(source)

    println("ExecDefinition=${new JsonBuilder(execDefinitions).toPrettyString()}")
    return execDefinitions
}

private Boolean testSuiteOverride(ExecDefinitions execDefinitions) {

    if (execDefinitions) {
        def overriddenSuiteFile = new File("${projectName}/${overriddenTestNgSuiteFileName}")

        if (overriddenSuiteFile?.exists()) {
            overriddenSuiteFile.delete()
        }

        overriddenSuiteFile << new TestNGSuiteGenerator(execDefinitions).generate()
        true
    } else {
        false
    }
}

//Find fields in the execDefinitions object and set them as system variables for consuming in tests
private static void overrideSystemProperties(ExecDefinitions execDefinitions) {
    if (execDefinitions) {
        def systemProperties = execDefinitions.getSystemProperties()
        if (systemProperties != null) {

            StringSubstitutor subst = buildStringSubstitutor()

            for (String key : systemProperties.keySet()) {
                String value = subst.replace(systemProperties[key].toString())
                println "Set system property '${key}' to '${value}'"

                System.setProperty(key, value)
            }
        }
    }
}

private static StringSubstitutor buildStringSubstitutor() {
    Map<String, String> props = new HashMap<>(System.getenv())
    props.putAll(System.getProperties().toSpreadMap())

    StringSubstitutor subst = new StringSubstitutor(props)
    subst.setEnableSubstitutionInVariables(true)
    subst.setEnableUndefinedVariableException(false)
    return subst
}
